---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/autocomplete/json?input=%D0%92%D0%B0%D1%88%D0%B8%D0%BD%D0%B3%D1%82%D0%BE%D0%BD&key=AIzaSyAnjjXhcY6uPaAAZg5J-5xTv_v9uvtbiJs&types=geocode
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Thu, 26 Apr 2018 23:36:37 GMT
      Expires:
      - Thu, 26 Apr 2018 23:36:37 GMT
      Cache-Control:
      - private, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      Alt-Svc:
      - hq=":443"; ma=2592000; quic=51303433; quic=51303432; quic=51303431; quic=51303339;
        quic=51303335,quic=":443"; ma=2592000; v="43,42,41,39,35"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICAicHJlZGljdGlvbnMiIDogWwogICAgICB7CiAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAi0JLQsNGI0LjQvdCz0YLQvtC9LCBVU0EiLAogICAgICAgICAiaWQiIDogIjViZjRjYjk1NTY3MGY5MDEzMWE3OTNmZmIyMTlkNTNkMGExNmQ0YTgiLAogICAgICAgICAibWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAibGVuZ3RoIiA6IDksCiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSi1iREQ1X19saFZRUnV2TmZiR2g0UXBRIiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2pRdkFBQUFqa1ZtaTdwV1JuLTRTTEhlTjVBc3pvZ2N2NU5JcDRCNUNWZnFweFdUNjdyTUpOcWhRMWVDRVlxN3V2dFNmd1VQRWhCcjRaYUpta0ZmNjZmWHlBejM5cVZpR2hRZWRkalZEbXExOC10LS03Zm1OYloySW92S1V3IiwKICAgICAgICAgInN0cnVjdHVyZWRfZm9ybWF0dGluZyIgOiB7CiAgICAgICAgICAgICJtYWluX3RleHQiIDogItCS0LDRiNC40L3Qs9GC0L7QvSIsCiAgICAgICAgICAgICJtYWluX3RleHRfbWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibGVuZ3RoIiA6IDksCiAgICAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJzZWNvbmRhcnlfdGV4dCIgOiAiVVNBIgogICAgICAgICB9LAogICAgICAgICAidGVybXMiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMCwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICLQktCw0YjQuNC90LPRgtC+0L0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAxMSwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJVU0EiCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInR5cGVzIiA6IFsgImFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSIsICJwb2xpdGljYWwiLCAiZ2VvY29kZSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAi0JLQsNGI0LjQvdCz0YLQvtC9LCBEQywgVVNBIiwKICAgICAgICAgImlkIiA6ICI0OWMwY2I0YWE5NGM4OGJlNzU2MTFkNWM4MGYyOWNmMDVkNTVhMzQwIiwKICAgICAgICAgIm1hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImxlbmd0aCIgOiA5LAogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpXLVQyV3Q3R3Q0a1JLbDJJMUNKRlVzSSIsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNrUXpBQUFBNzhVZE9JSWVFdkpvSVFBU29Ka2pMRGNzcnJNTEZSNDktUm51ZWltR1R4eC1IRUdmRHEtS1lkRV8xNzNiLURmUmV4cFpqeVdsT2Z2akEwa3l0d1B6R1JJUXZXWlBuNDh4NDhLaDQ2NTNscG10OHhvVWhlb2hLY0o5WFNEZTZuRUZmbXRLODA1SVpxbyIsCiAgICAgICAgICJzdHJ1Y3R1cmVkX2Zvcm1hdHRpbmciIDogewogICAgICAgICAgICAibWFpbl90ZXh0IiA6ICLQktCw0YjQuNC90LPRgtC+0L0iLAogICAgICAgICAgICAibWFpbl90ZXh0X21hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImxlbmd0aCIgOiA5LAogICAgICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAic2Vjb25kYXJ5X3RleHQiIDogIkRDLCBVU0EiCiAgICAgICAgIH0sCiAgICAgICAgICJ0ZXJtcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwLAogICAgICAgICAgICAgICAidmFsdWUiIDogItCS0LDRiNC40L3Qs9GC0L7QvSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDExLAogICAgICAgICAgICAgICAidmFsdWUiIDogIkRDIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMTUsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiVVNBIgogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJ0eXBlcyIgOiBbICJsb2NhbGl0eSIsICJwb2xpdGljYWwiLCAiZ2VvY29kZSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAi0JLQsNGI0LjQvdCz0YLQvtC9LCBOWSwgVVNBIiwKICAgICAgICAgImlkIiA6ICJkMjBjOTBlODA3ODUyZmNmMmE3YmM3YzUyZjBmZDhiYWRiMDA0N2QxIiwKICAgICAgICAgIm1hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImxlbmd0aCIgOiA5LAogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUp5LVNqWmF6WDM0a1J4NU9LVEpaVVdKRSIsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNrUXpBQUFBLTdEWjlqOW1qekJUdS11UjhpcXh3NjViclYzUnRkYkJhN3NreVowaHdaLTFpekFPSWlic0UwdkFDLXRPMHVrNFRHbWlWR2kxb2V1WE9kaXR3ZE5FOFJJUWh1NTBiblpmcHd4Yi1zMENGRnh6Q3hvVXdwOGhKUTQ4Vk16ZndVTU1NdFVla01IYjEwMCIsCiAgICAgICAgICJzdHJ1Y3R1cmVkX2Zvcm1hdHRpbmciIDogewogICAgICAgICAgICAibWFpbl90ZXh0IiA6ICLQktCw0YjQuNC90LPRgtC+0L0iLAogICAgICAgICAgICAibWFpbl90ZXh0X21hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImxlbmd0aCIgOiA5LAogICAgICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAic2Vjb25kYXJ5X3RleHQiIDogIk5ZLCBVU0EiCiAgICAgICAgIH0sCiAgICAgICAgICJ0ZXJtcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwLAogICAgICAgICAgICAgICAidmFsdWUiIDogItCS0LDRiNC40L3Qs9GC0L7QvSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDExLAogICAgICAgICAgICAgICAidmFsdWUiIDogIk5ZIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMTUsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiVVNBIgogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJ0eXBlcyIgOiBbICJhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzIiLCAicG9saXRpY2FsIiwgImdlb2NvZGUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICAiZGVzY3JpcHRpb24iIDogItCS0LDRiNC40L3Qs9GC0L7QvSwgT1IsIFVTQSIsCiAgICAgICAgICJpZCIgOiAiNGI4MDRjMjhjMjU5NTA4ZWVhYzM2ZTA2Y2QyZmJmYjM2NDg0OWMxNiIsCiAgICAgICAgICJtYXRjaGVkX3N1YnN0cmluZ3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJsZW5ndGgiIDogOSwKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKNThMOVdzaG5sVlFSS19ZYmwtR3U5VE0iLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDa1F6QUFBQTM4b3JWRDQ1aXVUYnk3WWd6Y0RNVlRoczFFczJuMHAtamQ1MnMtOERsRkhNXzViRk5Tem1qRXRrakw3VC1QZnRSOWNiVFZkX3FsRnp2MUNGSmUyU2lCSVFBc1VaNXpjMHFoTTlvbE5oQ185ejZ4b1VVUmdrM3BlbzRqRXVQWnI1dm5OMGFPcUVxb2siLAogICAgICAgICAic3RydWN0dXJlZF9mb3JtYXR0aW5nIiA6IHsKICAgICAgICAgICAgIm1haW5fdGV4dCIgOiAi0JLQsNGI0LjQvdCz0YLQvtC9IiwKICAgICAgICAgICAgIm1haW5fdGV4dF9tYXRjaGVkX3N1YnN0cmluZ3MiIDogWwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJsZW5ndGgiIDogOSwKICAgICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgInNlY29uZGFyeV90ZXh0IiA6ICJPUiwgVVNBIgogICAgICAgICB9LAogICAgICAgICAidGVybXMiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMCwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICLQktCw0YjQuNC90LPRgtC+0L0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAxMSwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJPUiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDE1LAogICAgICAgICAgICAgICAidmFsdWUiIDogIlVTQSIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAidHlwZXMiIDogWyAiYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yIiwgInBvbGl0aWNhbCIsICJnZW9jb2RlIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICLQktCw0YjQuNC90LPRgtC+0L0t0YHRgtGA0LjRgiwgTmV3IFlvcmssIE5ZLCBVU0EiLAogICAgICAgICAiaWQiIDogIjE2ODk5OTg2NjQ4YjQ1Nzc3MTk4YWUxNDJiMGI3NzAwODNmYmQ3ZTAiLAogICAgICAgICAibWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAibGVuZ3RoIiA6IDksCiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiRWpEUWt0Q3cwWWpRdU5DOTBMUFJndEMtMEwwdDBZSFJndEdBMExqUmdpd2dUbVYzSUZsdmNtc3NJRTVaTENCVlUwRSIsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNrUTBBQUFBZUh6VHJKWGxoeHp3Ml91N1pKTUhVVXlfMnFudU95Vld2X2VEZm11ODU5VkMxTjRWaVh4d2ZCRk5ROUZDWmw5bHFTUGRfc25ib1RKOTBlcUNaTGY0WEJJUXhXeGYtTFQ5OXNMSjZrcV9EZHRNYkJvVXpkbHU0NHFoWlhNX19DaUNIZEtoc1hqN2plRSIsCiAgICAgICAgICJzdHJ1Y3R1cmVkX2Zvcm1hdHRpbmciIDogewogICAgICAgICAgICAibWFpbl90ZXh0IiA6ICLQktCw0YjQuNC90LPRgtC+0L0t0YHRgtGA0LjRgiIsCiAgICAgICAgICAgICJtYWluX3RleHRfbWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibGVuZ3RoIiA6IDksCiAgICAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJzZWNvbmRhcnlfdGV4dCIgOiAiTmV3IFlvcmssIE5ZLCBVU0EiCiAgICAgICAgIH0sCiAgICAgICAgICJ0ZXJtcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwLAogICAgICAgICAgICAgICAidmFsdWUiIDogItCS0LDRiNC40L3Qs9GC0L7QvS3RgdGC0YDQuNGCIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMTcsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiTmV3IFlvcmsiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAyNywKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJOWSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDMxLAogICAgICAgICAgICAgICAidmFsdWUiIDogIlVTQSIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAidHlwZXMiIDogWyAicm91dGUiLCAiZ2VvY29kZSIgXQogICAgICB9CiAgIF0sCiAgICJzdGF0dXMiIDogIk9LIgp9Cg==
    http_version: 
  recorded_at: Thu, 26 Apr 2018 23:36:45 GMT
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/autocomplete/json?input=%D0%A1%D0%B8%D1%8D%D1%82%D0%BB&key=AIzaSyAnjjXhcY6uPaAAZg5J-5xTv_v9uvtbiJs&types=geocode
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Thu, 26 Apr 2018 23:36:38 GMT
      Expires:
      - Thu, 26 Apr 2018 23:36:38 GMT
      Cache-Control:
      - private, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      Alt-Svc:
      - hq=":443"; ma=2592000; quic=51303433; quic=51303432; quic=51303431; quic=51303339;
        quic=51303335,quic=":443"; ma=2592000; v="43,42,41,39,35"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 26 Apr 2018 23:36:46 GMT
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyAnjjXhcY6uPaAAZg5J-5xTv_v9uvtbiJs&language=ru&place_id=
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Thu, 26 Apr 2018 23:36:39 GMT
      Pragma:
      - no-cache
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Cache-Control:
      - no-cache, must-revalidate
      Access-Control-Allow-Origin:
      - "*"
      Server:
      - mafe
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      Alt-Svc:
      - hq=":443"; ma=2592000; quic=51303433; quic=51303432; quic=51303431; quic=51303339;
        quic=51303335,quic=":443"; ma=2592000; v="43,42,41,39,35"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
           "error_message" : "Invalid request. Invalid 'place_id' parameter.",
           "results" : [],
           "status" : "INVALID_REQUEST"
        }
    http_version: 
  recorded_at: Thu, 26 Apr 2018 23:36:47 GMT
recorded_with: VCR 3.0.3
