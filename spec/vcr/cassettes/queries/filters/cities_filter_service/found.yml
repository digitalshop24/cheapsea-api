---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/autocomplete/json?input=%D0%A4%D1%80%D1%8F%D0%B7%D0%B8%D0%BD%D0%BE&key=AIzaSyAnjjXhcY6uPaAAZg5J-5xTv_v9uvtbiJs&types=geocode
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Tue, 01 May 2018 07:28:53 GMT
      Expires:
      - Tue, 01 May 2018 07:28:53 GMT
      Cache-Control:
      - private, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      Alt-Svc:
      - hq=":443"; ma=2592000; quic=51303433; quic=51303432; quic=51303431; quic=51303339;
        quic=51303335,quic=":443"; ma=2592000; v="43,42,41,39,35"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICAicHJlZGljdGlvbnMiIDogWwogICAgICB7CiAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAi0KTRgNGP0LfQuNC90L4sIE1vc2NvdyBPYmxhc3QsIFJ1c3NpYSIsCiAgICAgICAgICJpZCIgOiAiMTM1NWY4ZTVmOTg1MWUzY2ExYmFhMDhlODlhNDNkNTc0MjVjMjkzNyIsCiAgICAgICAgICJtYXRjaGVkX3N1YnN0cmluZ3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJsZW5ndGgiIDogNywKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKYTY5elpsa3J0VVlSXzZCTVBLYXZJWmMiLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDa1E5QUFBQV9lS2htYkVqRWhERWFjcF9MdTdZY2lzOTA0Uzlla0tERUYyU1ljdTg1Z1lOLU5ZM0oyYVJSWktlZnA4RE9RUGE1ZTRDWG52bmVBSGhBREt5RGRaNHZCSVFDVklERlRSaEctdXl6NE40NTU1ZU9Sb1VDeHktVnlWZnpZWTVWekotTHM2MVFGcWpTTWMiLAogICAgICAgICAic3RydWN0dXJlZF9mb3JtYXR0aW5nIiA6IHsKICAgICAgICAgICAgIm1haW5fdGV4dCIgOiAi0KTRgNGP0LfQuNC90L4iLAogICAgICAgICAgICAibWFpbl90ZXh0X21hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImxlbmd0aCIgOiA3LAogICAgICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAic2Vjb25kYXJ5X3RleHQiIDogIk1vc2NvdyBPYmxhc3QsIFJ1c3NpYSIKICAgICAgICAgfSwKICAgICAgICAgInRlcm1zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAi0KTRgNGP0LfQuNC90L4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiA5LAogICAgICAgICAgICAgICAidmFsdWUiIDogIk1vc2NvdyBPYmxhc3QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAyNCwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJSdXNzaWEiCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInR5cGVzIiA6IFsgImxvY2FsaXR5IiwgInBvbGl0aWNhbCIsICJnZW9jb2RlIiBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICLQpNGA0Y/Qt9C40L3QvtCy0YHQutCw0Y8g0YPQu9C40YbQsCwgVm9sb2dkYSwgUnVzc2lhIiwKICAgICAgICAgImlkIiA6ICIxNDEwZWEzYzgzZGZiZGQ2OGQyZDBkYTMwZmVlYjYyOTFhMjk2ZTcxIiwKICAgICAgICAgIm1hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImxlbmd0aCIgOiA3LAogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkVqVFFwTkdBMFlfUXQ5QzQwTDNRdnRDeTBZSFF1dEN3MFk4ZzBZUFF1OUM0MFliUXNDd2dWbTlzYjJka1lTd2dVblZ6YzJsaCIsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNrUTRBQUFBaTlyUXF2Y1NPQWVSRVFpeXFDYUNRemhNWE5HT25KX3ZfbEl2Mjg4RF9ZVU8zNkhxel9hUDhxWGl6X0tqRDZpTEVFcFZsaS1MWG1JMHNsOTNWM3dXdmhJUVNEemNzdFYxQUdrU08zSU91dFFtdEJvVWptLXlGWk1yWTRrUnRiQWZFMWFoSENrWG5FYyIsCiAgICAgICAgICJzdHJ1Y3R1cmVkX2Zvcm1hdHRpbmciIDogewogICAgICAgICAgICAibWFpbl90ZXh0IiA6ICLQpNGA0Y/Qt9C40L3QvtCy0YHQutCw0Y8g0YPQu9C40YbQsCIsCiAgICAgICAgICAgICJtYWluX3RleHRfbWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibGVuZ3RoIiA6IDcsCiAgICAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJzZWNvbmRhcnlfdGV4dCIgOiAiVm9sb2dkYSwgUnVzc2lhIgogICAgICAgICB9LAogICAgICAgICAidGVybXMiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMCwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICLQpNGA0Y/Qt9C40L3QvtCy0YHQutCw0Y8g0YPQu9C40YbQsCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDIwLAogICAgICAgICAgICAgICAidmFsdWUiIDogIlZvbG9nZGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAyOSwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJSdXNzaWEiCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInR5cGVzIiA6IFsgInJvdXRlIiwgImdlb2NvZGUiIF0KICAgICAgfSwKICAgICAgewogICAgICAgICAiZGVzY3JpcHRpb24iIDogItCk0YDRj9C30LjQvdC+LCBWbGFkaW1pciBPYmxhc3QsIFJ1c3NpYSIsCiAgICAgICAgICJpZCIgOiAiOWUwM2ZlN2UwYWU3MjQ3ZjIzMzc0YjhlMDIxMDY0NTZkY2UwNWYxOCIsCiAgICAgICAgICJtYXRjaGVkX3N1YnN0cmluZ3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJsZW5ndGgiIDogNywKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKbWMtMHBKYUhTMEVSZjh3dVo3X1Y4MU0iLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDa1FfQUFBQTRjMXFsaXhxUHJoRnp3TnBONlBiaU16cDFabndzWXFNOWNOWXhEbFNVNmtpX1pVRjA5eGxIbUplbTdJdzRnb0hQN3hXYjYyeHgydW4xNDZrbEJFSkhSSVFTYmVKU0h2a19VdWVkbkx2RDdYck9Sb1U5NjQ5Sm94Qkl3aGl1Z2pRUDEzMmItdDBzTUUiLAogICAgICAgICAic3RydWN0dXJlZF9mb3JtYXR0aW5nIiA6IHsKICAgICAgICAgICAgIm1haW5fdGV4dCIgOiAi0KTRgNGP0LfQuNC90L4iLAogICAgICAgICAgICAibWFpbl90ZXh0X21hdGNoZWRfc3Vic3RyaW5ncyIgOiBbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImxlbmd0aCIgOiA3LAogICAgICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAic2Vjb25kYXJ5X3RleHQiIDogIlZsYWRpbWlyIE9ibGFzdCwgUnVzc2lhIgogICAgICAgICB9LAogICAgICAgICAidGVybXMiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMCwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICLQpNGA0Y/Qt9C40L3QviIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDksCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiVmxhZGltaXIgT2JsYXN0IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMjYsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiUnVzc2lhIgogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJ0eXBlcyIgOiBbICJsb2NhbGl0eSIsICJwb2xpdGljYWwiLCAiZ2VvY29kZSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAi0KTRgNGP0LfQuNC90L4g0KLQvtCyLiwgRnJ5YXppbm8sIE1vc2NvdyBPYmxhc3QsIFJ1c3NpYSIsCiAgICAgICAgICJpZCIgOiAiY2U1OTU3YWIwZmJkOWM3YmMwNmFmN2VkMGM3OGE0ZDNmZjU1NDBjMSIsCiAgICAgICAgICJtYXRjaGVkX3N1YnN0cmluZ3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJsZW5ndGgiIDogNywKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKTlNsa0FtRXJ0VVlSS2t3dHZsZ0pMVDQiLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDbFJGQUFBQTBNRmZTMWprUHJqMUQ4M3JKc1ZBNDFaV0JvOGRYaWJoc2lEUW9keE14bWJRWGVGNkF5STNyN1FtTTVKbVhLYk1KZ04zbVd4VTYzUWV4NzBmWGptQ21McmNIcmxVazBOTXhWRDI4d1drZktVU0VHaEZCNS1DNUxyWjFSUndQLWYtOXM0YUZBbG5zU0tlZFZFWmZ0blhpMkxOdWFRbjBBdFUiLAogICAgICAgICAic3RydWN0dXJlZF9mb3JtYXR0aW5nIiA6IHsKICAgICAgICAgICAgIm1haW5fdGV4dCIgOiAi0KTRgNGP0LfQuNC90L4g0KLQvtCyLiIsCiAgICAgICAgICAgICJtYWluX3RleHRfbWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibGVuZ3RoIiA6IDcsCiAgICAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJzZWNvbmRhcnlfdGV4dCIgOiAiRnJ5YXppbm8sIE1vc2NvdyBPYmxhc3QsIFJ1c3NpYSIKICAgICAgICAgfSwKICAgICAgICAgInRlcm1zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDAsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAi0KTRgNGP0LfQuNC90L4g0KLQvtCyLiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDE0LAogICAgICAgICAgICAgICAidmFsdWUiIDogIkZyeWF6aW5vIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMjQsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiTW9zY293IE9ibGFzdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDM5LAogICAgICAgICAgICAgICAidmFsdWUiIDogIlJ1c3NpYSIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAidHlwZXMiIDogWyAidHJhbnNpdF9zdGF0aW9uIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiLCAiZ2VvY29kZSIgXQogICAgICB9LAogICAgICB7CiAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAi0KTRgNGP0LfQuNC90L4sIFZvbG9nZGEgT2JsYXN0LCBSdXNzaWEiLAogICAgICAgICAiaWQiIDogIjQ3MjRkMjZlODI2NDg2MmQ3ZWFkYjkzNWNmYTY4Mjg2MDU5YWFkOWYiLAogICAgICAgICAibWF0Y2hlZF9zdWJzdHJpbmdzIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAibGVuZ3RoIiA6IDcsCiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSjh6cnE0SkhzdWtZUjE3U0pkRnRzYl9zIiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2tRLUFBQUFVUXNtajhWMGxsY2FUWkh0WkhNdTNLZ2dEVno2OG43Y0s5WlZaV0thZUxTb1ZSOElvYVdPR1hzd1BfcXR1ekJkbGNJS2V6YTVrRDJ2S0ZIY0tkdzNMQklRRUJhRzFGZW1LenMwVXMtRElfNXZ0aG9VUnlnbm0ybVNHVWVCVEZna05XZ20yam5rUUk0IiwKICAgICAgICAgInN0cnVjdHVyZWRfZm9ybWF0dGluZyIgOiB7CiAgICAgICAgICAgICJtYWluX3RleHQiIDogItCk0YDRj9C30LjQvdC+IiwKICAgICAgICAgICAgIm1haW5fdGV4dF9tYXRjaGVkX3N1YnN0cmluZ3MiIDogWwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJsZW5ndGgiIDogNywKICAgICAgICAgICAgICAgICAgIm9mZnNldCIgOiAwCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgInNlY29uZGFyeV90ZXh0IiA6ICJWb2xvZ2RhIE9ibGFzdCwgUnVzc2lhIgogICAgICAgICB9LAogICAgICAgICAidGVybXMiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJvZmZzZXQiIDogMCwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICLQpNGA0Y/Qt9C40L3QviIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAib2Zmc2V0IiA6IDksCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiVm9sb2dkYSBPYmxhc3QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIm9mZnNldCIgOiAyNSwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJSdXNzaWEiCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInR5cGVzIiA6IFsgImxvY2FsaXR5IiwgInBvbGl0aWNhbCIsICJnZW9jb2RlIiBdCiAgICAgIH0KICAgXSwKICAgInN0YXR1cyIgOiAiT0siCn0K
    http_version: 
  recorded_at: Tue, 01 May 2018 07:28:56 GMT
recorded_with: VCR 3.0.3
